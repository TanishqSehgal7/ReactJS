Initialize repository and push to github through 
commands:

1. Make readme file

echo "ReactJS" >> ReadMe.md

2. Initialize git repository

git init

3. Add ReadMe file to github repository
git add README.md

4. Commit to git with message
git commit -m "first-commit"

5. Make a branch on git
git branch -M main

6. Add origin branch to remote
git remote add origin 
https://github.com/TanishqSehgal7/ReactJS.git

7. Push branch to origin
git push -u origin main

===========================================================

package-lock.json file, some information..
Here it is : 

1. Dependency Version Locking: Locks exact versions.
2. Specific Version Recording: Records exact nested dependency versions.
3. Dependency Resolution: Ensures consistent installs.
4. Consistency & Reproducibility: Same versions for all.
5. Avoid Manual Editing: Risk of conflicts.

In a nutshell, `package-lock.json` lists and locks 
down specific versions of all project dependencies, 
ensuring consistent installations and preventing 
version conflicts. It's hands-off for manual edits to 
avoid potential issues.

===========================================================

ReactDOM/Virtual DOM - react creates its own DOM 
and compares it to the actual browser dom and
updates only those elements which need an updation
or any change.

ReactDOM.createRoot(document.getElementById('root'))
.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

In virtual DOM there is a method called 
createRoot() which creates a root element which
will be the outermost container for the HTML
webpage.

root.render() -> this renders the React App. Using
jsx, we can render html elements into a webpage
using javascript.


function App() {
  const [count, setCount] = useState(0)
  return (
    <>
      <h1>Hello World!!</h1>
      <p className="read-the-docs">
        This is my first React Project
      </p>
    </>
  )
}

export default App

App is a function which return HTML elements that 
are to be rendered inside the root element.

In vite, react script is directly loaded inside
the html page using the script tag just like the 
standard way of loading a basic javascript file.

In order to return multiple components inside the react app,
we need to wrap them up inside an empty tag called
fragment <></>
Without a fragment only one element/component can be 
rendered.

IN a react app which is made using Vite, the javascript
files should always have the extension as .jsx
.js files would throw an error.

While making components, always keep the component name
starting with capital letters which prevents errors
be it in Vite project or be it npx create-react-app
project.


function App() {
  const userName = "Tanishq";
  return (
    <>
      <h1>Hello World!!</h1>
      <p className="read-the-docs">
        This is my first React Project with username {username}
      </p>
    </>
  )
}

{username} ->  this is the way we can inject javascript inside the
returned HTML content. But this only takes up the evaluated 
expression, ie, no code logic/changes can be done here. Rather,
it only accepts the evaluated values/variables etc.

React.createElement() is automatically injected by Babel
which is a transpiler toolchain that is mainly used to 
convert ECMAScript 2015+ code into a backwards compatible 
version of JavaScript in current and older browsers 
or environments.

React controls all the UI updation of the app for which we
need React Hooks which help us make the updated values of 
different variables visible to the UI.













